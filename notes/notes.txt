
https://www.markdownguide.org/cheat-sheet/

https://www.phptutorial.net/php-oop/

https://learn.microsoft.com/en-us/office/troubleshoot/access/database-normalization-description

https://en.wikipedia.org/wiki/Database_normalization

read section 3 & 4
convert tables to 2nf
simplify the table, no redunent data, no unneeded feilds.


create a mvc that selects and inserts



In a typical MVC architecture, it's common to have a separate controller for each model. This way, each controller is responsible for handling the user interactions related to its specific model. This approach helps to keep your code organized and makes it easier to maintain and update your application as it grows.

In your case, you have five models (`Species`, `Breeds`, `Toys`, `Pricing`, `Pets`), which presumably correspond to five different aspects of your application. Therefore, it would be a good idea to create a separate controller for each model.

For example, you could have the following controllers:

- `SpeciesController.php` for handling user interactions related to species
- `BreedsController.php` for handling user interactions related to breeds
- `ToysController.php` for handling user interactions related to toys
- `PricingController.php` for handling user interactions related to pricing
- `PetsController.php` for handling user interactions related to pets

Each controller would contain the PHP code for handling user interactions related to its respective model. This way, when you need to handle a user interaction related to a specific aspect of your application, you can just use the corresponding controller.

However, if your application is small and the logic for handling user interactions is simple, you might decide to use a single controller for all models. This is less common, but it can be a reasonable approach in some cases. The decision depends on the specific needs and complexity of your application.